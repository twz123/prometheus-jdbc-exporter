name: CI

on:
- push
- pull_request

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    timeout-minutes: 5

    # outputs:
    #   version: ${{ steps.generate_version.outputs.version }}

    env:
      DOCKER_REGISTRY: ghcr.io
      MAVEN_OPTS: -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn

    steps:
    - name: Generate version string
      id: generate_version
      uses: actions/github-script@v5
      with:
        script: |
          const ref = context.ref
          const output = {};

          if (context.payload.pull_request) {
            output.version = `PR-${context.payload.pull_request.number}`;
          } else if (ref === "refs/heads/main") {
            output.version = `${new Date().toISOString().replace(/T.+/, "").replace(/-0*/g, ".")}.${process.env.GITHUB_RUN_NUMBER}`;
          } else if (ref.startsWith('refs/heads/')) {
            output.version = `B-${ref.replace(/^refs\/heads\//, "").replace(/\//, "-")}`;
          } else if (ref.startsWith('refs/tags/')) {
            output.version = `B-${ref.replace(/^refs\/tags\//, "").replace(/\//, "-")}`;
          } else {
            core.setFailed(`Unsupported ref: ${ref}`);
            return;
          }

          core.info(`Generated: ${JSON.stringify(output, null, 2)}`);
          Object.entries(output).forEach(([key, value]) => core.setOutput(key, value));

    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: temurin
        java-version: 11.0.13

    - name: Check environment
      run: |
        env | sort
        git --version
        docker version
        java --version
        ./mvnw --batch-mode --version

    - name: Prepare release
      if: ${{ github.ref == 'refs/heads/main' }}
      env:
        VERSION: ${{ steps.generate_version.outputs.version }}
      run: |
        ./mvnw --batch-mode -DnewVersion="$VERSION" -DgenerateBackupPoms=false versions:set
        git config user.name CI
        git config user.email eng+ci@yieldlab.de
        git add .
        git commit --message="Release version $VERSION"
        git tag -a --message="Release version $VERSION" -- "$VERSION"
        git -c advice.detachedHead=false checkout "$VERSION" --
        git show

    - name: Fetch dependencies
      run: ./mvnw --batch-mode dependency:go-offline

    - name: Build application
      id: build
      env:
        DOCKER_IMAGE_NAME: ${{ format('{0}/{1}', github.repository, github.event.repository.name) }}
        DOCKER_IMAGE_TAG: ${{ steps.generate_version.outputs.version }}
      run: |
        ./mvnw --batch-mode \
          -Ddocker.image.registry="$DOCKER_REGISTRY" \
          -Ddocker.image.name="$DOCKER_IMAGE_NAME" \
          -Ddocker.image.tag="$DOCKER_IMAGE_TAG" \
          clean verify jib:dockerBuild
        echo ::set-output name=image::"$DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG"

    - name: Create GitHub release
      if: ${{ github.ref == 'refs/heads/main' }}
      uses: actions/github-script@v5
      env:
        VERSION: ${{ steps.generate_version.outputs.version }}
      with:
        script: |
          const release = {
            owner: context.payload.repository.owner.name,
            repo: context.payload.repository.name,
            tag_name: process.env.VERSION
          };

          await exec.exec('git', ['push', 'origin', 'tag', '--', release.tag_name]);
          await github.rest.repos.createRelease({
            ...release,
            // this should become github.rest.repos.generateReleaseNotes(...) when the rest-endpoint-methods plugin is updated to >= v5.12
            // https://github.com/actions/github-script/blob/5e5d515dc7088569e3d5a2cfecfe542588a1efc6/package.json#L45
            // https://github.com/octokit/plugin-rest-endpoint-methods.js/commit/5d2de25b3ffe638db3aac59fd17c0a00e0ceae26
            ...await github.request('POST /repos/{owner}/{repo}/releases/generate-notes', release),
          });

    - name: Push Docker image
      if: ${{ !github.event.pull_request || (github.event.pull_request.base.repo.owner.login == github.event.pull_request.head.repo.owner.login) }}
      uses: actions/github-script@v5
      env:
        DOCKER_REGISTRY_USERNAME: ${{ github.actor }}
        DOCKER_REGISTRY_PASSWORD: ${{ github.token }}
        DOCKER_IMAGE: ${{ steps.build.outputs.image }}
      with:
        script: |
          await exec.exec(
            'docker', [ 'login', '--password-stdin', '-u', process.env.DOCKER_REGISTRY_USERNAME, '--', process.env.DOCKER_REGISTRY ],
            { input: Buffer.from(process.env.DOCKER_REGISTRY_PASSWORD, 'utf8') }
          );

          try {
            await exec.exec('docker', ['push', '--', process.env.DOCKER_IMAGE]);
          } finally {
            await exec.exec('docker', ['logout', '--', process.env.DOCKER_REGISTRY]);
          }

  # release:
  #   name: GitHub release
  #   runs-on: ubuntu-20.04
  #   if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
  #   needs: build
  #   steps:

  #   - name: Set up Node 14
  #     uses: actions/setup-node@v2
  #     with:
  #       node-version: '14'

  #   - name: Create GitHub release
  #     env:
  #       VERSION: ${{ needs.build.outputs.version }}
  #       GITHUB_REPO_OWNER: ${{ github.event.repository.owner.name }}
  #       GITHUB_REPO_NAME: ${{ github.event.repository.name }}
  #       GREN_GITHUB_TOKEN: ${{ github.token }}
  #     run: |
  #       npm install -g github-release-notes@0.17.3
  #       gren release --username="$GITHUB_REPO_OWNER" --repo="$GITHUB_REPO_NAME" -t "$VERSION" --override
