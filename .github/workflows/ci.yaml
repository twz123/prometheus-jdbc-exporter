name: CI

on:
- push
- pull_request

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    timeout-minutes: 5

    env:
      DOCKER_REGISTRY: ghcr.io
      MAVEN_OPTS: -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn

    steps:
    - name: Initialize
      id: initialize
      uses: actions/github-script@v5
      with:
        script: |
          const ref = context.ref
          const output = {};

          if (context.payload.pull_request) {
            const { number, } = context.payload.pull_request;
            output.version = `PR-${number}`;
            const data = await github.graphql(`query ($owner: String!, $repo: String!, $number: Int!) {
              repository(owner: $owner, name: $repo) {
                pullRequest(number: $number) {
                  mergeable
                  potentialMergeCommit { oid }
                }
              }
            }`, { ...context.repo, number, });
            core.debug(`Response: ${JSON.stringify(data, null, 2)}`);
            const { potentialMergeCommit, mergeable, } = data.repository.pullRequest;
            output.mergeable = mergeable;
            switch (mergeable) {
              case "UNKNOWN": core.warning(`Mergeable state unknown for PR #${number}`); // fall-through
              case "MERGEABLE": output.ref = potentialMergeCommit.oid;
            }
          } else if (ref === "refs/heads/main") {
            output.version = `${new Date().toISOString().replace(/T.+/, "").replace(/-0*/g, ".")}.${process.env.GITHUB_RUN_NUMBER}`;
          } else if (ref.startsWith('refs/heads/')) {
            output.version = `B-${ref.replace(/^refs\/heads\//, "").replace(/\//g, "-")}`;
          } else if (ref.startsWith('refs/tags/')) {
            output.version = `${ref.replace(/^refs\/tags\//, "").replace(/\//g, "-")}`;
          } else {
            core.setFailed(`Unsupported ref: ${ref}`);
            return;
          }

          core.info(`Initialized: ${JSON.stringify(output, null, 2)}`);
          Object.entries(output).forEach(([key, value]) => core.setOutput(key, value));

    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ steps.initialize.outputs.ref }}

    # - name: Set up JDK 11
    #   uses: actions/setup-java@v2
    #   with:
    #     distribution: temurin
    #     java-version: 11.0.13

    # - name: Check environment
    #   run: |
    #     env | sort
    #     git --version
    #     docker version
    #     java --version
    #     ./mvnw --batch-mode --version

    # - name: Prepare release
    #   if: ${{ github.ref == 'refs/heads/main' }}
    #   env:
    #     VERSION: ${{ steps.initialize.outputs.version }}
    #   run: |
    #     ./mvnw --batch-mode -DnewVersion="$VERSION" -DgenerateBackupPoms=false versions:set
    #     git config user.name CI
    #     git config user.email eng+ci@yieldlab.de
    #     git add .
    #     git commit --message="Release version $VERSION"
    #     git tag -a --message="Release version $VERSION" -- "$VERSION"
    #     git -c advice.detachedHead=false checkout "$VERSION" --
    #     git show

    # - name: Fetch dependencies
    #   run: ./mvnw --batch-mode dependency:go-offline

    # - name: Build application
    #   id: build
    #   env:
    #     DOCKER_IMAGE_NAME: ${{ format('{0}/{1}', github.repository, github.event.repository.name) }}
    #     DOCKER_IMAGE_TAG: ${{ steps.initialize.outputs.version }}
    #   run: |
    #     ./mvnw --batch-mode \
    #       -Ddocker.image.registry="$DOCKER_REGISTRY" \
    #       -Ddocker.image.name="$DOCKER_IMAGE_NAME" \
    #       -Ddocker.image.tag="$DOCKER_IMAGE_TAG" \
    #       clean verify jib:dockerBuild
    #     echo ::set-output name=image::"$DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG"

    # - name: Create GitHub release
    #   if: ${{ github.ref == 'refs/heads/main' }}
    #   uses: actions/github-script@v5
    #   env:
    #     VERSION: ${{ steps.initialize.outputs.version }}
    #   with:
    #     script: |
    #       const repo = {
    #         owner: context.payload.repository.owner.name,
    #         repo: context.payload.repository.name,
    #       };

    #       const release = {
    #         ...repo,
    #         tag_name: process.env.VERSION
    #       };

    #       const notesGeneration = {
    #         ...release,
    #         previous_tag_name: (await github.rest.repos.getLatestRelease(repo)).data.tag_name
    #       };

    #       await exec.exec('git', ['push', 'origin', 'tag', '--', release.tag_name]);

    #       // this should become github.rest.repos.generateReleaseNotes(...) when the rest-endpoint-methods plugin is updated to >= v5.12
    #       // https://github.com/actions/github-script/blob/5e5d515dc7088569e3d5a2cfecfe542588a1efc6/package.json#L45
    #       // https://github.com/octokit/plugin-rest-endpoint-methods.js/commit/5d2de25b3ffe638db3aac59fd17c0a00e0ceae26
    #       const releaseNotes = (await github.request('POST /repos/{owner}/{repo}/releases/generate-notes', notesGeneration)).data;
    #       core.info(`Release notes generated:\n${JSON.stringify(notesGeneration, null, 2)}\n${JSON.stringify(releaseNotes, null, 2)}`);

    #       await github.rest.repos.createRelease({...release, ...releaseNotes});

    # - name: Push Docker image
    #   if: ${{ !github.event.pull_request || (github.actor != 'dependabot[bot]' && github.event.pull_request.base.repo.owner.login == github.event.pull_request.head.repo.owner.login) }}
    #   uses: actions/github-script@v5
    #   env:
    #     DOCKER_REGISTRY_USERNAME: ${{ github.actor }}
    #     DOCKER_REGISTRY_PASSWORD: ${{ github.token }}
    #     DOCKER_IMAGE: ${{ steps.build.outputs.image }}
    #   with:
    #     script: |
    #       await exec.exec(
    #         'docker', [ 'login', '--password-stdin', '-u', process.env.DOCKER_REGISTRY_USERNAME, '--', process.env.DOCKER_REGISTRY ],
    #         { input: Buffer.from(process.env.DOCKER_REGISTRY_PASSWORD, 'utf8') }
    #       );

    #       try {
    #         await exec.exec('docker', ['push', '--', process.env.DOCKER_IMAGE]);
    #       } finally {
    #         await exec.exec('docker', ['logout', '--', process.env.DOCKER_REGISTRY]);
    #       }
